syntax = "proto3";

package MTRecorder;

import "aelf/core.proto";
import "acs1.proto";
import "google/protobuf/timestamp.proto";

service MerkleTreeRecorderContract {
    option (aelf.csharp_state) = "AElf.Contracts.MerkleTreeRecorderContract.MerkleTreeRecorderContractState";
    option (aelf.base) = "acs1.proto";

    rpc Initialize (google.protobuf.Empty) returns (google.protobuf.Empty) {
    }

    rpc CreateRecorder (Recorder) returns (google.protobuf.Empty) {
    }

    rpc RecordMerkleTree (RecordMerkleTreeInput) returns (google.protobuf.Empty) {
    }

    rpc ChangeOwner (aelf.Address) returns (google.protobuf.Empty) {
    }

    rpc MerkleProof (MerkleProofInput) returns (google.protobuf.BoolValue) {
        option (aelf.is_view) = true;
    }

    rpc GetLeafLocatedMerkleTree (GetLeafLocatedMerkleTreeInput) returns (GetLeafLocatedMerkleTreeOutput) {
        option (aelf.is_view) = true;
    }

    rpc GetMerkleTree (GetMerkleTreeInput) returns (MerkleTree) {
        option (aelf.is_view) = true;
    }

    rpc GetOwner (google.protobuf.Empty) returns (aelf.Address) {
        option (aelf.is_view) = true;
    }

    rpc GetRecorder (RecorderIdInput) returns (Recorder) {
        option (aelf.is_view) = true;
    }

    rpc GetRecorderCount (google.protobuf.Empty) returns (google.protobuf.Int64Value) {
        option (aelf.is_view) = true;
    }

    rpc GetLastRecordedLeafIndex (RecorderIdInput) returns (google.protobuf.Int64Value) {
        option (aelf.is_view) = true;
    }

    rpc GetSatisfiedTreeCount (RecorderIdInput) returns (google.protobuf.Int64Value) {
        option (aelf.is_view) = true;
    }
}


message Recorder {
    aelf.Address admin = 1;
    int64 maximal_leaf_count = 2;
}

message RecordMerkleTreeInput {
    int64 recorder_id = 1;
    int64 last_leaf_index = 2;
    aelf.Hash merkle_tree_root = 3;
}

message MerkleTree {
    int64 last_leaf_index = 1;
    int64 first_leaf_index = 2;
    aelf.Hash merkle_tree_root = 3;
}

message GetLeafLocatedMerkleTreeInput {
    int64 leaf_index = 1;
    int64 recorder_id = 2;
}

message GetLeafLocatedMerkleTreeOutput {
    int64 last_leaf_index = 1;
    int64 first_leaf_index = 2;
    int64 tree_index = 3;
}

message GetMerkleTreeInput {
    int64 recorder_id = 1;
    int64 last_leaf_index = 2;
}

message MerkleProofInput {
    int64 last_leaf_index = 1;
    aelf.Hash leaf_node = 2;
    aelf.MerklePath merkle_path = 3;
    int64 recorder_id = 4;
}

message RecorderIdInput {
    int64 recorder_id = 1;
}

message RecorderCreated {
    option (aelf.is_event) = true;
    aelf.Address admin = 1;
    int64 maximal_leaf_count = 2;
    int64 recorder_id = 3;
}

message MerkleTreeRecorded {
    option (aelf.is_event) = true;
    int64 recorder_id = 1 [(aelf.is_indexed) = true];
    int64 last_leaf_index = 2;
}