syntax = "proto3";

package tokenswap;

import "aelf/core.proto";
import "acs1.proto";
import "google/protobuf/timestamp.proto";

service TokenSwapContract {
    option (aelf.csharp_state) = "AElf.Contracts.TokenSwapContract.TokenSwapContractState";
    option (aelf.base) = "acs1.proto";

    rpc Initialize   (InitializeInput) returns (google.protobuf.Empty) {
    }
    rpc CreateSwap (CreateSwapInput) returns (aelf.Hash) {
    }
    rpc SwapToken (SwapTokenInput) returns (google.protobuf.Empty) {
    }
    rpc ChangeSwapRatio (ChangeSwapRatioInput) returns (google.protobuf.Empty) {
    }
    rpc Deposit (DepositInput) returns (google.protobuf.Empty) {
    }
    rpc Withdraw (WithdrawInput) returns (google.protobuf.Empty) {
    }
    rpc GetSwapInfo (aelf.Hash) returns (SwapInfo) {
        option (aelf.is_view) = true;
    }
    rpc GetSwapPair (GetSwapPairInput) returns (SwapPair) {
        option (aelf.is_view) = true;
    }
    rpc GetSwapAmounts (GetSwapAmountsInput) returns (SwapAmounts) {
        option (aelf.is_view) = true;
    }
}

message InitializeInput{
    aelf.Address merkle_tree_recorder_address = 1; 
}

message CreateSwapInput {
    int32 origin_token_size_in_byte = 1;
    bool origin_token_numeric_big_endian = 2;
    repeated SwapTargetToken swap_target_token_list = 3;
    int64 recorder_id = 4;
}

message SwapTargetToken {
    string target_token_symbol = 1;
    SwapRatio swap_ratio = 2;
    int64 deposit_amount = 3;
}

message SwapInfo {
    aelf.Hash swap_id = 1;
    int32 origin_token_size_in_byte = 2;
    bool origin_token_numeric_big_endian = 3;
    map<string, aelf.Hash> swap_target_token_map = 4;
    aelf.Address controller = 5;
    int64 recorder_id = 6;
}

message SwapPair {
    aelf.Hash swap_id = 1;
    int32 origin_token_size_in_byte = 2;
    bool origin_token_numeric_big_endian = 3;
    string target_token_symbol = 4;
    SwapRatio swap_ratio = 5;
    int64 swapped_amount = 6;
    int64 swapped_times = 7;
    int64 deposit_amount = 8;
}

message SwapRatio {
    int64 origin_share = 1;
    int64 target_share = 2;
}

message ChangeSwapRatioInput {
    aelf.Hash swap_id = 1;
    SwapRatio swap_ratio = 2;
    string target_token_symbol = 3;
}

message SwapTokenInput {
    aelf.Hash swap_id = 1;
    string origin_amount = 2;
    aelf.MerklePath merkle_path = 3;
    aelf.Address receiver_address = 4;
    aelf.Hash unique_id = 5; // to make every swap unique 
    int64 last_leaf_index = 6;
}

message SwapPairAdded {
    option (aelf.is_event) = true;
    aelf.Hash swap_id = 1;
}

message DepositInput {
    aelf.Hash swap_id = 1;
    string target_token_symbol = 2;
    int64 amount = 3;
}

message SwapRatioChanged {
    option (aelf.is_event) = true;
    aelf.Hash swap_id = 1;
    SwapRatio new_swap_ratio = 2;
    string target_token_symbol = 3;
}

message TokenSwapEvent {
    option (aelf.is_event) = true;
    aelf.Address address = 1;
    int64 amount = 2;
    string symbol = 3;
}

message GetSwapPairInput {
    aelf.Hash swap_id = 1;
    string target_token_symbol = 2;
}


message GetSwapAmountsInput {
    aelf.Hash swap_id = 1;
    aelf.Hash unique_id = 2;
}

message SwapAmounts {
    aelf.Address receiver = 1;
    map<string, int64> received_amounts = 2;
}

message WithdrawInput {
    aelf.Hash swap_id = 1;
    string target_token_symbol = 2;
    int64 amount = 3;
}
