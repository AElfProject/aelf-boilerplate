syntax = "proto3";

import "aelf/core.proto";
import "aelf/options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "AElf.Contracts.AESwapContract";

service AESwapContract {
    option (aelf.csharp_state) = "AElf.Contracts.AESwapContract.AESwapContractState";

    //Actions
    rpc Initialize(google.protobuf.Empty)returns(google.protobuf.Empty){
    }
    rpc CreatePair(CreatePairInput) returns (CreatePairOutput){
    }
    rpc AddLiquidity (AddLiquidityInput) returns (AddLiquidityOutput) {
    }
    rpc RemoveLiquidity (RemoveLiquidityInput) returns (RemoveLiquidityOutput) {
    }
    rpc SwapExactTokenForToken(SwapExactTokenForTokenInput) returns(SwapOutput){
    }
    rpc SwapTokenForExactToken(SwapTokenForExactTokenInput) returns(SwapOutput){
    }
    rpc TransferLiquidityTokens(TransferLiquidityTokensInput) returns(google.protobuf.Empty){
    }
    //Views
    rpc GetPairs(google.protobuf.Empty)returns(PairList){
        option (aelf.is_view) = true;
    }
    // fetches and sorts the reserves for a pair
    rpc GetReserves(GetReservesInput)returns(GetReservesOutput){
        option (aelf.is_view) = true;
    }
    rpc GetTotalSupply(PairList)returns(GetTotalSupplyOutput){
        option (aelf.is_view) = true;
    }
    rpc GetLiquidityTokenBalance(PairList)returns(GetLiquidityTokenBalanceOutput){
        option (aelf.is_view) = true;
    }
    rpc GetAccountAssets(google.protobuf.Empty)returns(PairList){
        option (aelf.is_view) = true;
    }
    rpc GetAmountIn(GetAmountInInput)returns(google.protobuf.Int64Value){
        option (aelf.is_view) = true;
    }
    rpc GetAmountOut(GetAmountOutInput)returns(google.protobuf.Int64Value){
        option (aelf.is_view) = true;
    }
    rpc Quote(QuoteInput)returns(google.protobuf.Int64Value){
        option (aelf.is_view) = true;
    }
}
message CreatePairInput{
    string symbol_pair =1;
}
message CreatePairOutput{
    aelf.Address pair_address=1;
}
message PairList{
    repeated string symbol_pair =1;
}
message AddLiquidityInput{
    string symbol_a=1;
    string symbol_b=2;
    int64 amount_a_desired =3;
    int64 amount_b_desired =4;
    int64 amount_a_min =5;
    int64 amount_b_min =6;
    google.protobuf.Timestamp deadline =7;
}
message AddLiquidityOutput{
    string symbol_a=1;
    string symbol_b =2;
    int64 amount_a =3; 
    int64 amount_b =4; 
    int64 liquidity_token =5;
   
}
message RemoveLiquidityInput{
    string symbol_a =1;
    string symbol_b =2;
    int64 amount_a_min =3;
    int64 amount_b_min =4;
    int64 liquidity_remove=5;
    google.protobuf.Timestamp deadline =6;
}
 message RemoveLiquidityOutput{
     int64 amount_a=1;
     int64 amount_b =2;
     string symbol_a=3;
     string symbol_b=4;
 }
 message SwapExactTokenForTokenInput{
    int64 amount_in=1;
    int64 amount_out_min=2;
    string symbol_in=3;
    string symbol_out =4;
    google.protobuf.Timestamp deadline =5;
 }
 message SwapTokenForExactTokenInput{
     int64 amount_out=1;
     int64 amount_in_max=2;
     string symbol_in=3;
     string symbol_out =4;
     google.protobuf.Timestamp deadline =5;
  }

 message SwapOutput{
    int64 amount_out=1;
    string symbol_out =2;
 }
message GetReservesInput{
    repeated string symbol_pair =1;
}

message GetReservesOutput{
    repeated ReservePairResult results=1;
}
message ReservePairResult{
    string symbol_pair=1;
    string symbol_a=2;
    string symbol_b=3;
    int64 reserve_a =4;
    int64 reserve_b=5;
    int64 block_timestamp_last=6;
}

message GetTotalSupplyOutput{
 repeated TotalSupplyResult results=1;
}
message TotalSupplyResult{
 string symbol_pair=1;
  int64 total_supply =2;
}
message GetLiquidityTokenBalanceOutput{
 repeated LiquidityTokenBalanceResult results=1;
}
message LiquidityTokenBalanceResult{
 string symbol_pair=1;
 int64 balance =2;
}
message GetAmountInInput{
   string symbol_in=1;
   string symbol_out=2;
   int64 amount_out=3;
}
message GetAmountOutInput{
     string symbol_in=1;
     string symbol_out=2;
     int64 amount_in=3;
}
message QuoteInput{
     string symbol_a=1;
     string symbol_b=2;
     int64 amount_a=3;
}
message TransferLiquidityTokensInput{
    aelf.Address to =1;
    string symbol_pair=2;
    int64 amount=3;
   }
message Pair{
     aelf.Hash hash =1;
     aelf.Address address=2;
}
message PairCreated{
    option (aelf.is_event) = true;
    string symbol_a = 1;
    string symbol_b = 2;
    aelf.Address pair = 3;
   }
message LiquidityAdded{
   option (aelf.is_event) = true;
   aelf.Address sender = 1;
   string symbol_a=2;
   string  symbol_b=3;
   int64 amount_a = 4;
   int64 amount_b = 5;
   int64 liquidity_token=6;
   }
message LiquidityRemoved{
   option (aelf.is_event) = true;
   aelf.Address sender = 1;
   string symbol_a=2;
   string symbol_b=3;
   int64 amount_a = 4;
   int64 amount_b = 5;
   int64 liquidity_token=6;
   }
message Swap{
    option (aelf.is_event) = true;
    aelf.Address sender = 1;
    string symbol_in=2;
    string symbol_out=3;
    int64 amount_in = 4;
    int64 amount_out = 5;
    int64 total_fee=6; 
    int64 bonus_fee=7;
   }

message Sync{
    option (aelf.is_event) = true;
    string symbol_a=2;
    string symbol_b=3;
    int64 reserve_a = 4;
    int64 reserve_b = 5;
}
