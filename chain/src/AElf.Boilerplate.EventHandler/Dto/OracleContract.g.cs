// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: oracle_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Contracts.Oracle {

  /// <summary>Holder for reflection information generated from oracle_contract.proto</summary>
  public static partial class OracleContractReflection {

    #region Descriptor
    /// <summary>File descriptor for oracle_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OracleContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVvcmFjbGVfY29udHJhY3QucHJvdG8aD2FlbGYvY29yZS5wcm90bxoSYWVs",
            "Zi9vcHRpb25zLnByb3RvGhtnb29nbGUvcHJvdG9idWYvZW1wdHkucHJvdG8a",
            "H2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aHmdvb2dsZS9wcm90",
            "b2J1Zi93cmFwcGVycy5wcm90byKgAQoPSW5pdGlhbGl6ZUlucHV0EiIKGm1p",
            "bmltdW1fb3JhY2xlX25vZGVzX2NvdW50GAEgASgFEiAKGGRlZmF1bHRfcmV2",
            "ZWFsX3RocmVzaG9sZBgCIAEoBRIjChtkZWZhdWx0X2FnZ3JlZ2F0ZV90aHJl",
            "c2hvbGQYAyABKAUSIgoaZGVmYXVsdF9leHBpcmF0aW9uX3NlY29uZHMYBCAB",
            "KAUigQIKClF1ZXJ5SW5wdXQSDwoHcGF5bWVudBgBIAEoAxIkCg1jYWxsYmFj",
            "a19pbmZvGAIgASgLMg0uQ2FsbGJhY2tJbmZvEjIKG2FnZ3JlZ2F0b3JfY29u",
            "dHJhY3RfYWRkcmVzcxgDIAEoCzINLmFlbGYuQWRkcmVzcxIqChRkZXNpZ25h",
            "dGVkX25vZGVfbGlzdBgEIAEoCzIMLkFkZHJlc3NMaXN0EhQKDHVybF90b19x",
            "dWVyeRgFIAEoCRIaChJhdHRyaWJ1dGVfdG9fZmV0Y2gYBiABKAkSGwoTYWdn",
            "cmVnYXRlX3RocmVzaG9sZBgHIAEoBRINCgV0b2tlbhgIIAEoCSJMCgxDYWxs",
            "YmFja0luZm8SJwoQY29udHJhY3RfYWRkcmVzcxgBIAEoCzINLmFlbGYuQWRk",
            "cmVzcxITCgttZXRob2RfbmFtZRgCIAEoCSIrCgtBZGRyZXNzTGlzdBIcCgV2",
            "YWx1ZRgBIAMoCzINLmFlbGYuQWRkcmVzcyK7BAoLUXVlcnlSZWNvcmQSKgoU",
            "ZGVzaWduYXRlZF9ub2RlX2xpc3QYAiABKAsyDC5BZGRyZXNzTGlzdBIyChth",
            "Z2dyZWdhdG9yX2NvbnRyYWN0X2FkZHJlc3MYAyABKAsyDS5hZWxmLkFkZHJl",
            "c3MSOAoUZXhwaXJhdGlvbl90aW1lc3RhbXAYBCABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEisKI2lzX3N1ZmZpY2llbnRfY29tbWl0bWVudHNf",
            "Y29sbGVjdGVkGAUgASgIEiQKHGlzX3N1ZmZpY2llbnRfZGF0YV9jb2xsZWN0",
            "ZWQYBiABKAgSFAoMZmluYWxfcmVzdWx0GAcgASgMEg8KB3BheW1lbnQYCCAB",
            "KAMSJAoNY2FsbGJhY2tfaW5mbxgJIAEoCzINLkNhbGxiYWNrSW5mbxIcCghx",
            "dWVyeV9pZBgKIAEoCzIKLmFlbGYuSGFzaBIbChNhZ2dyZWdhdGVfdGhyZXNo",
            "b2xkGAsgASgFEiMKDHF1ZXJ5X3NlbmRlchgMIAEoCzINLmFlbGYuQWRkcmVz",
            "cxIgChhpc19jb21taXRfc3RhZ2VfZmluaXNoZWQYDSABKAgSGQoRY29tbWl0",
            "bWVudHNfY291bnQYDiABKAUSFAoMaXNfY2FuY2VsbGVkGA8gASgIEhQKDHVy",
            "bF90b19xdWVyeRgQIAEoCRIaChJhdHRyaWJ1dGVfdG9fZmV0Y2gYESABKAkS",
            "DQoFdG9rZW4YEiABKAkiSwoLQ29tbWl0SW5wdXQSHAoIcXVlcnlfaWQYASAB",
            "KAsyCi5hZWxmLkhhc2gSHgoKY29tbWl0bWVudBgCIAEoCzIKLmFlbGYuSGFz",
            "aCJTCgtSZXZlYWxJbnB1dBIcCghxdWVyeV9pZBgBIAEoCzIKLmFlbGYuSGFz",
            "aBIMCgRkYXRhGAIgASgMEhgKBHNhbHQYAyABKAsyCi5hZWxmLkhhc2gicwoN",
            "Q29tbWl0bWVudE1hcBIoCgV2YWx1ZRgBIAMoCzIZLkNvbW1pdG1lbnRNYXAu",
            "VmFsdWVFbnRyeRo4CgpWYWx1ZUVudHJ5EgsKA2tleRgBIAEoCRIZCgV2YWx1",
            "ZRgCIAEoCzIKLmFlbGYuSGFzaDoCOAEifgoRU2V0VGhyZXNob2xkSW5wdXQS",
            "IgoabWluaW11bV9vcmFjbGVfbm9kZXNfY291bnQYASABKAUSIAoYZGVmYXVs",
            "dF9yZXZlYWxfdGhyZXNob2xkGAIgASgFEiMKG2RlZmF1bHRfYWdncmVnYXRl",
            "X3RocmVzaG9sZBgDIAEoBSIyCgpSZXN1bHRMaXN0Eg8KB3Jlc3VsdHMYASAD",
            "KAwSEwoLZnJlcXVlbmNpZXMYAiADKAUiOAoITm9kZURhdGESHgoHYWRkcmVz",
            "cxgBIAEoCzINLmFlbGYuQWRkcmVzcxIMCgRkYXRhGAIgASgMIp4BCgxOb2Rl",
            "RGF0YUxpc3QSGAoFdmFsdWUYASADKAsyCS5Ob2RlRGF0YRIzChxvYnNlcnZl",
            "cl9hc3NvY2lhdGlvbl9hZGRyZXNzGAIgASgLMg0uYWVsZi5BZGRyZXNzEhQK",
            "DHVybF90b19xdWVyeRgDIAEoCRIaChJhdHRyaWJ1dGVfdG9fZmV0Y2gYBCAB",
            "KAkSDQoFdG9rZW4YBSABKAkizQIKDFF1ZXJ5Q3JlYXRlZBIPCgdwYXltZW50",
            "GAEgASgDEiQKDWNhbGxiYWNrX2luZm8YAiABKAsyDS5DYWxsYmFja0luZm8S",
            "MgobYWdncmVnYXRvcl9jb250cmFjdF9hZGRyZXNzGAMgASgLMg0uYWVsZi5B",
            "ZGRyZXNzEioKFGRlc2lnbmF0ZWRfbm9kZV9saXN0GAQgASgLMgwuQWRkcmVz",
            "c0xpc3QSFAoMdXJsX3RvX3F1ZXJ5GAUgASgJEhoKEmF0dHJpYnV0ZV90b19m",
            "ZXRjaBgGIAEoCRIbChNhZ2dyZWdhdGVfdGhyZXNob2xkGAcgASgFEiQKDXF1",
            "ZXJ5X21hbmFnZXIYCCABKAsyDS5hZWxmLkFkZHJlc3MSHAoIcXVlcnlfaWQY",
            "CSABKAsyCi5hZWxmLkhhc2gSDQoFdG9rZW4YCiABKAk6BKC7GAEiWQoOUXVl",
            "cnlDYW5jZWxsZWQSEAoIcXVlcnlfaWQYASABKAwSLwoLY2FuY2VsX3RpbWUY",
            "AiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wOgSguxgBIj8KF1N1",
            "ZmZpY2llbnREYXRhQ29sbGVjdGVkEh4KCnJlcXVlc3RfaWQYASABKAsyCi5h",
            "ZWxmLkhhc2g6BKC7GAEiRAoeU3VmZmljaWVudENvbW1pdG1lbnRzQ29sbGVj",
            "dGVkEhwKCHF1ZXJ5X2lkGAEgASgLMgouYWVsZi5IYXNoOgSguxgBIqwBChJD",
            "b21taXRtZW50UmV2ZWFsZWQSHAoIcXVlcnlfaWQYASABKAsyCi5hZWxmLkhh",
            "c2gSKgoTb3JhY2xlX25vZGVfYWRkcmVzcxgCIAEoCzINLmFlbGYuQWRkcmVz",
            "cxIeCgpjb21taXRtZW50GAMgASgLMgouYWVsZi5IYXNoEgwKBGRhdGEYBCAB",
            "KAwSGAoEc2FsdBgFIAEoCzIKLmFlbGYuSGFzaDoEoLsYASJECg5RdWVyeUNv",
            "bXBsZXRlZBIcCghxdWVyeV9pZBgBIAEoCzIKLmFlbGYuSGFzaBIOCgZyZXN1",
            "bHQYAiABKAw6BKC7GAEysAUKDk9yYWNsZUNvbnRyYWN0EjgKCkluaXRpYWxp",
            "emUSEC5Jbml0aWFsaXplSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHki",
            "ABIiCgVRdWVyeRILLlF1ZXJ5SW5wdXQaCi5hZWxmLkhhc2giABIwCgZDb21t",
            "aXQSDC5Db21taXRJbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEjAK",
            "BlJldmVhbBIMLlJldmVhbElucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5",
            "IgASMwoLQ2FuY2VsUXVlcnkSCi5hZWxmLkhhc2gaFi5nb29nbGUucHJvdG9i",
            "dWYuRW1wdHkiABI7ChBDaGFuZ2VDb250cm9sbGVyEg0uYWVsZi5BZGRyZXNz",
            "GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASPAoMU2V0VGhyZXNob2xkEhIu",
            "U2V0VGhyZXNob2xkSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABI9",
            "Cg1HZXRDb250cm9sbGVyEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5Gg0uYWVs",
            "Zi5BZGRyZXNzIgWIifcBARIxCg5HZXRRdWVyeVJlY29yZBIKLmFlbGYuSGFz",
            "aBoMLlF1ZXJ5UmVjb3JkIgWIifcBARI1ChBHZXRDb21taXRtZW50TWFwEgou",
            "YWVsZi5IYXNoGg4uQ29tbWl0bWVudE1hcCIFiIn3AQESUwoUR2V0T3JhY2xl",
            "VG9rZW5TeW1ib2wSFi5nb29nbGUucHJvdG9idWYuRW1wdHkaHC5nb29nbGUu",
            "cHJvdG9idWYuU3RyaW5nVmFsdWUiBYiJ9wEBGi6yzPYBKUFFbGYuQ29udHJh",
            "Y3RzLk9yYWNsZS5PcmFjbGVDb250cmFjdFN0YXRlQhiqAhVBRWxmLkNvbnRy",
            "YWN0cy5PcmFjbGViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.Types.CoreReflection.Descriptor, global::AElf.OptionsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.InitializeInput), global::AElf.Contracts.Oracle.InitializeInput.Parser, new[]{ "MinimumOracleNodesCount", "DefaultRevealThreshold", "DefaultAggregateThreshold", "DefaultExpirationSeconds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.QueryInput), global::AElf.Contracts.Oracle.QueryInput.Parser, new[]{ "Payment", "CallbackInfo", "AggregatorContractAddress", "DesignatedNodeList", "UrlToQuery", "AttributeToFetch", "AggregateThreshold", "Token" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.CallbackInfo), global::AElf.Contracts.Oracle.CallbackInfo.Parser, new[]{ "ContractAddress", "MethodName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.AddressList), global::AElf.Contracts.Oracle.AddressList.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.QueryRecord), global::AElf.Contracts.Oracle.QueryRecord.Parser, new[]{ "DesignatedNodeList", "AggregatorContractAddress", "ExpirationTimestamp", "IsSufficientCommitmentsCollected", "IsSufficientDataCollected", "FinalResult", "Payment", "CallbackInfo", "QueryId", "AggregateThreshold", "QuerySender", "IsCommitStageFinished", "CommitmentsCount", "IsCancelled", "UrlToQuery", "AttributeToFetch", "Token" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.CommitInput), global::AElf.Contracts.Oracle.CommitInput.Parser, new[]{ "QueryId", "Commitment" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.RevealInput), global::AElf.Contracts.Oracle.RevealInput.Parser, new[]{ "QueryId", "Data", "Salt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.CommitmentMap), global::AElf.Contracts.Oracle.CommitmentMap.Parser, new[]{ "Value" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.SetThresholdInput), global::AElf.Contracts.Oracle.SetThresholdInput.Parser, new[]{ "MinimumOracleNodesCount", "DefaultRevealThreshold", "DefaultAggregateThreshold" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.ResultList), global::AElf.Contracts.Oracle.ResultList.Parser, new[]{ "Results", "Frequencies" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.NodeData), global::AElf.Contracts.Oracle.NodeData.Parser, new[]{ "Address", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.NodeDataList), global::AElf.Contracts.Oracle.NodeDataList.Parser, new[]{ "Value", "ObserverAssociationAddress", "UrlToQuery", "AttributeToFetch", "Token" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.QueryCreated), global::AElf.Contracts.Oracle.QueryCreated.Parser, new[]{ "Payment", "CallbackInfo", "AggregatorContractAddress", "DesignatedNodeList", "UrlToQuery", "AttributeToFetch", "AggregateThreshold", "QueryManager", "QueryId", "Token" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.QueryCancelled), global::AElf.Contracts.Oracle.QueryCancelled.Parser, new[]{ "QueryId", "CancelTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.SufficientDataCollected), global::AElf.Contracts.Oracle.SufficientDataCollected.Parser, new[]{ "RequestId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.SufficientCommitmentsCollected), global::AElf.Contracts.Oracle.SufficientCommitmentsCollected.Parser, new[]{ "QueryId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.CommitmentRevealed), global::AElf.Contracts.Oracle.CommitmentRevealed.Parser, new[]{ "QueryId", "OracleNodeAddress", "Commitment", "Data", "Salt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Oracle.QueryCompleted), global::AElf.Contracts.Oracle.QueryCompleted.Parser, new[]{ "QueryId", "Result" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class InitializeInput : pb::IMessage<InitializeInput>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InitializeInput> _parser = new pb::MessageParser<InitializeInput>(() => new InitializeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput(InitializeInput other) : this() {
      minimumOracleNodesCount_ = other.minimumOracleNodesCount_;
      defaultRevealThreshold_ = other.defaultRevealThreshold_;
      defaultAggregateThreshold_ = other.defaultAggregateThreshold_;
      defaultExpirationSeconds_ = other.defaultExpirationSeconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput Clone() {
      return new InitializeInput(this);
    }

    /// <summary>Field number for the "minimum_oracle_nodes_count" field.</summary>
    public const int MinimumOracleNodesCountFieldNumber = 1;
    private int minimumOracleNodesCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinimumOracleNodesCount {
      get { return minimumOracleNodesCount_; }
      set {
        minimumOracleNodesCount_ = value;
      }
    }

    /// <summary>Field number for the "default_reveal_threshold" field.</summary>
    public const int DefaultRevealThresholdFieldNumber = 2;
    private int defaultRevealThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultRevealThreshold {
      get { return defaultRevealThreshold_; }
      set {
        defaultRevealThreshold_ = value;
      }
    }

    /// <summary>Field number for the "default_aggregate_threshold" field.</summary>
    public const int DefaultAggregateThresholdFieldNumber = 3;
    private int defaultAggregateThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultAggregateThreshold {
      get { return defaultAggregateThreshold_; }
      set {
        defaultAggregateThreshold_ = value;
      }
    }

    /// <summary>Field number for the "default_expiration_seconds" field.</summary>
    public const int DefaultExpirationSecondsFieldNumber = 4;
    private int defaultExpirationSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultExpirationSeconds {
      get { return defaultExpirationSeconds_; }
      set {
        defaultExpirationSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinimumOracleNodesCount != other.MinimumOracleNodesCount) return false;
      if (DefaultRevealThreshold != other.DefaultRevealThreshold) return false;
      if (DefaultAggregateThreshold != other.DefaultAggregateThreshold) return false;
      if (DefaultExpirationSeconds != other.DefaultExpirationSeconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinimumOracleNodesCount != 0) hash ^= MinimumOracleNodesCount.GetHashCode();
      if (DefaultRevealThreshold != 0) hash ^= DefaultRevealThreshold.GetHashCode();
      if (DefaultAggregateThreshold != 0) hash ^= DefaultAggregateThreshold.GetHashCode();
      if (DefaultExpirationSeconds != 0) hash ^= DefaultExpirationSeconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MinimumOracleNodesCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MinimumOracleNodesCount);
      }
      if (DefaultRevealThreshold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DefaultRevealThreshold);
      }
      if (DefaultAggregateThreshold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DefaultAggregateThreshold);
      }
      if (DefaultExpirationSeconds != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DefaultExpirationSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MinimumOracleNodesCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MinimumOracleNodesCount);
      }
      if (DefaultRevealThreshold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DefaultRevealThreshold);
      }
      if (DefaultAggregateThreshold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DefaultAggregateThreshold);
      }
      if (DefaultExpirationSeconds != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DefaultExpirationSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinimumOracleNodesCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinimumOracleNodesCount);
      }
      if (DefaultRevealThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultRevealThreshold);
      }
      if (DefaultAggregateThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultAggregateThreshold);
      }
      if (DefaultExpirationSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultExpirationSeconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeInput other) {
      if (other == null) {
        return;
      }
      if (other.MinimumOracleNodesCount != 0) {
        MinimumOracleNodesCount = other.MinimumOracleNodesCount;
      }
      if (other.DefaultRevealThreshold != 0) {
        DefaultRevealThreshold = other.DefaultRevealThreshold;
      }
      if (other.DefaultAggregateThreshold != 0) {
        DefaultAggregateThreshold = other.DefaultAggregateThreshold;
      }
      if (other.DefaultExpirationSeconds != 0) {
        DefaultExpirationSeconds = other.DefaultExpirationSeconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinimumOracleNodesCount = input.ReadInt32();
            break;
          }
          case 16: {
            DefaultRevealThreshold = input.ReadInt32();
            break;
          }
          case 24: {
            DefaultAggregateThreshold = input.ReadInt32();
            break;
          }
          case 32: {
            DefaultExpirationSeconds = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MinimumOracleNodesCount = input.ReadInt32();
            break;
          }
          case 16: {
            DefaultRevealThreshold = input.ReadInt32();
            break;
          }
          case 24: {
            DefaultAggregateThreshold = input.ReadInt32();
            break;
          }
          case 32: {
            DefaultExpirationSeconds = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class QueryInput : pb::IMessage<QueryInput>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<QueryInput> _parser = new pb::MessageParser<QueryInput>(() => new QueryInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryInput(QueryInput other) : this() {
      payment_ = other.payment_;
      callbackInfo_ = other.callbackInfo_ != null ? other.callbackInfo_.Clone() : null;
      aggregatorContractAddress_ = other.aggregatorContractAddress_ != null ? other.aggregatorContractAddress_.Clone() : null;
      designatedNodeList_ = other.designatedNodeList_ != null ? other.designatedNodeList_.Clone() : null;
      urlToQuery_ = other.urlToQuery_;
      attributeToFetch_ = other.attributeToFetch_;
      aggregateThreshold_ = other.aggregateThreshold_;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryInput Clone() {
      return new QueryInput(this);
    }

    /// <summary>Field number for the "payment" field.</summary>
    public const int PaymentFieldNumber = 1;
    private long payment_;
    /// <summary>
    /// Maximum for this query option.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Payment {
      get { return payment_; }
      set {
        payment_ = value;
      }
    }

    /// <summary>Field number for the "callback_info" field.</summary>
    public const int CallbackInfoFieldNumber = 2;
    private global::AElf.Contracts.Oracle.CallbackInfo callbackInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Oracle.CallbackInfo CallbackInfo {
      get { return callbackInfo_; }
      set {
        callbackInfo_ = value;
      }
    }

    /// <summary>Field number for the "aggregator_contract_address" field.</summary>
    public const int AggregatorContractAddressFieldNumber = 3;
    private global::AElf.Types.Address aggregatorContractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address AggregatorContractAddress {
      get { return aggregatorContractAddress_; }
      set {
        aggregatorContractAddress_ = value;
      }
    }

    /// <summary>Field number for the "designated_node_list" field.</summary>
    public const int DesignatedNodeListFieldNumber = 4;
    private global::AElf.Contracts.Oracle.AddressList designatedNodeList_;
    /// <summary>
    /// Will be association address if count is 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Oracle.AddressList DesignatedNodeList {
      get { return designatedNodeList_; }
      set {
        designatedNodeList_ = value;
      }
    }

    /// <summary>Field number for the "url_to_query" field.</summary>
    public const int UrlToQueryFieldNumber = 5;
    private string urlToQuery_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UrlToQuery {
      get { return urlToQuery_; }
      set {
        urlToQuery_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attribute_to_fetch" field.</summary>
    public const int AttributeToFetchFieldNumber = 6;
    private string attributeToFetch_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AttributeToFetch {
      get { return attributeToFetch_; }
      set {
        attributeToFetch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aggregate_threshold" field.</summary>
    public const int AggregateThresholdFieldNumber = 7;
    private int aggregateThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AggregateThreshold {
      get { return aggregateThreshold_; }
      set {
        aggregateThreshold_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 8;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payment != other.Payment) return false;
      if (!object.Equals(CallbackInfo, other.CallbackInfo)) return false;
      if (!object.Equals(AggregatorContractAddress, other.AggregatorContractAddress)) return false;
      if (!object.Equals(DesignatedNodeList, other.DesignatedNodeList)) return false;
      if (UrlToQuery != other.UrlToQuery) return false;
      if (AttributeToFetch != other.AttributeToFetch) return false;
      if (AggregateThreshold != other.AggregateThreshold) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payment != 0L) hash ^= Payment.GetHashCode();
      if (callbackInfo_ != null) hash ^= CallbackInfo.GetHashCode();
      if (aggregatorContractAddress_ != null) hash ^= AggregatorContractAddress.GetHashCode();
      if (designatedNodeList_ != null) hash ^= DesignatedNodeList.GetHashCode();
      if (UrlToQuery.Length != 0) hash ^= UrlToQuery.GetHashCode();
      if (AttributeToFetch.Length != 0) hash ^= AttributeToFetch.GetHashCode();
      if (AggregateThreshold != 0) hash ^= AggregateThreshold.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Payment != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Payment);
      }
      if (callbackInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CallbackInfo);
      }
      if (aggregatorContractAddress_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AggregatorContractAddress);
      }
      if (designatedNodeList_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DesignatedNodeList);
      }
      if (UrlToQuery.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UrlToQuery);
      }
      if (AttributeToFetch.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AttributeToFetch);
      }
      if (AggregateThreshold != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AggregateThreshold);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Payment != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Payment);
      }
      if (callbackInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CallbackInfo);
      }
      if (aggregatorContractAddress_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AggregatorContractAddress);
      }
      if (designatedNodeList_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DesignatedNodeList);
      }
      if (UrlToQuery.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UrlToQuery);
      }
      if (AttributeToFetch.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AttributeToFetch);
      }
      if (AggregateThreshold != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AggregateThreshold);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payment != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Payment);
      }
      if (callbackInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CallbackInfo);
      }
      if (aggregatorContractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AggregatorContractAddress);
      }
      if (designatedNodeList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DesignatedNodeList);
      }
      if (UrlToQuery.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UrlToQuery);
      }
      if (AttributeToFetch.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AttributeToFetch);
      }
      if (AggregateThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AggregateThreshold);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryInput other) {
      if (other == null) {
        return;
      }
      if (other.Payment != 0L) {
        Payment = other.Payment;
      }
      if (other.callbackInfo_ != null) {
        if (callbackInfo_ == null) {
          CallbackInfo = new global::AElf.Contracts.Oracle.CallbackInfo();
        }
        CallbackInfo.MergeFrom(other.CallbackInfo);
      }
      if (other.aggregatorContractAddress_ != null) {
        if (aggregatorContractAddress_ == null) {
          AggregatorContractAddress = new global::AElf.Types.Address();
        }
        AggregatorContractAddress.MergeFrom(other.AggregatorContractAddress);
      }
      if (other.designatedNodeList_ != null) {
        if (designatedNodeList_ == null) {
          DesignatedNodeList = new global::AElf.Contracts.Oracle.AddressList();
        }
        DesignatedNodeList.MergeFrom(other.DesignatedNodeList);
      }
      if (other.UrlToQuery.Length != 0) {
        UrlToQuery = other.UrlToQuery;
      }
      if (other.AttributeToFetch.Length != 0) {
        AttributeToFetch = other.AttributeToFetch;
      }
      if (other.AggregateThreshold != 0) {
        AggregateThreshold = other.AggregateThreshold;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Payment = input.ReadInt64();
            break;
          }
          case 18: {
            if (callbackInfo_ == null) {
              CallbackInfo = new global::AElf.Contracts.Oracle.CallbackInfo();
            }
            input.ReadMessage(CallbackInfo);
            break;
          }
          case 26: {
            if (aggregatorContractAddress_ == null) {
              AggregatorContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(AggregatorContractAddress);
            break;
          }
          case 34: {
            if (designatedNodeList_ == null) {
              DesignatedNodeList = new global::AElf.Contracts.Oracle.AddressList();
            }
            input.ReadMessage(DesignatedNodeList);
            break;
          }
          case 42: {
            UrlToQuery = input.ReadString();
            break;
          }
          case 50: {
            AttributeToFetch = input.ReadString();
            break;
          }
          case 56: {
            AggregateThreshold = input.ReadInt32();
            break;
          }
          case 66: {
            Token = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Payment = input.ReadInt64();
            break;
          }
          case 18: {
            if (callbackInfo_ == null) {
              CallbackInfo = new global::AElf.Contracts.Oracle.CallbackInfo();
            }
            input.ReadMessage(CallbackInfo);
            break;
          }
          case 26: {
            if (aggregatorContractAddress_ == null) {
              AggregatorContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(AggregatorContractAddress);
            break;
          }
          case 34: {
            if (designatedNodeList_ == null) {
              DesignatedNodeList = new global::AElf.Contracts.Oracle.AddressList();
            }
            input.ReadMessage(DesignatedNodeList);
            break;
          }
          case 42: {
            UrlToQuery = input.ReadString();
            break;
          }
          case 50: {
            AttributeToFetch = input.ReadString();
            break;
          }
          case 56: {
            AggregateThreshold = input.ReadInt32();
            break;
          }
          case 66: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CallbackInfo : pb::IMessage<CallbackInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CallbackInfo> _parser = new pb::MessageParser<CallbackInfo>(() => new CallbackInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallbackInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallbackInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallbackInfo(CallbackInfo other) : this() {
      contractAddress_ = other.contractAddress_ != null ? other.contractAddress_.Clone() : null;
      methodName_ = other.methodName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallbackInfo Clone() {
      return new CallbackInfo(this);
    }

    /// <summary>Field number for the "contract_address" field.</summary>
    public const int ContractAddressFieldNumber = 1;
    private global::AElf.Types.Address contractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ContractAddress {
      get { return contractAddress_; }
      set {
        contractAddress_ = value;
      }
    }

    /// <summary>Field number for the "method_name" field.</summary>
    public const int MethodNameFieldNumber = 2;
    private string methodName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MethodName {
      get { return methodName_; }
      set {
        methodName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallbackInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallbackInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ContractAddress, other.ContractAddress)) return false;
      if (MethodName != other.MethodName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contractAddress_ != null) hash ^= ContractAddress.GetHashCode();
      if (MethodName.Length != 0) hash ^= MethodName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (contractAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ContractAddress);
      }
      if (MethodName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MethodName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (contractAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ContractAddress);
      }
      if (MethodName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MethodName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractAddress);
      }
      if (MethodName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MethodName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallbackInfo other) {
      if (other == null) {
        return;
      }
      if (other.contractAddress_ != null) {
        if (contractAddress_ == null) {
          ContractAddress = new global::AElf.Types.Address();
        }
        ContractAddress.MergeFrom(other.ContractAddress);
      }
      if (other.MethodName.Length != 0) {
        MethodName = other.MethodName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (contractAddress_ == null) {
              ContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ContractAddress);
            break;
          }
          case 18: {
            MethodName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (contractAddress_ == null) {
              ContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ContractAddress);
            break;
          }
          case 18: {
            MethodName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AddressList : pb::IMessage<AddressList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AddressList> _parser = new pb::MessageParser<AddressList>(() => new AddressList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddressList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressList(AddressList other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressList Clone() {
      return new AddressList(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Types.Address> _repeated_value_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Types.Address.Parser);
    private readonly pbc::RepeatedField<global::AElf.Types.Address> value_ = new pbc::RepeatedField<global::AElf.Types.Address>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Types.Address> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddressList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddressList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      value_.WriteTo(output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      value_.WriteTo(ref output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddressList other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            value_.AddEntriesFrom(ref input, _repeated_value_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class QueryRecord : pb::IMessage<QueryRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<QueryRecord> _parser = new pb::MessageParser<QueryRecord>(() => new QueryRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRecord(QueryRecord other) : this() {
      designatedNodeList_ = other.designatedNodeList_ != null ? other.designatedNodeList_.Clone() : null;
      aggregatorContractAddress_ = other.aggregatorContractAddress_ != null ? other.aggregatorContractAddress_.Clone() : null;
      expirationTimestamp_ = other.expirationTimestamp_ != null ? other.expirationTimestamp_.Clone() : null;
      isSufficientCommitmentsCollected_ = other.isSufficientCommitmentsCollected_;
      isSufficientDataCollected_ = other.isSufficientDataCollected_;
      finalResult_ = other.finalResult_;
      payment_ = other.payment_;
      callbackInfo_ = other.callbackInfo_ != null ? other.callbackInfo_.Clone() : null;
      queryId_ = other.queryId_ != null ? other.queryId_.Clone() : null;
      aggregateThreshold_ = other.aggregateThreshold_;
      querySender_ = other.querySender_ != null ? other.querySender_.Clone() : null;
      isCommitStageFinished_ = other.isCommitStageFinished_;
      commitmentsCount_ = other.commitmentsCount_;
      isCancelled_ = other.isCancelled_;
      urlToQuery_ = other.urlToQuery_;
      attributeToFetch_ = other.attributeToFetch_;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRecord Clone() {
      return new QueryRecord(this);
    }

    /// <summary>Field number for the "designated_node_list" field.</summary>
    public const int DesignatedNodeListFieldNumber = 2;
    private global::AElf.Contracts.Oracle.AddressList designatedNodeList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Oracle.AddressList DesignatedNodeList {
      get { return designatedNodeList_; }
      set {
        designatedNodeList_ = value;
      }
    }

    /// <summary>Field number for the "aggregator_contract_address" field.</summary>
    public const int AggregatorContractAddressFieldNumber = 3;
    private global::AElf.Types.Address aggregatorContractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address AggregatorContractAddress {
      get { return aggregatorContractAddress_; }
      set {
        aggregatorContractAddress_ = value;
      }
    }

    /// <summary>Field number for the "expiration_timestamp" field.</summary>
    public const int ExpirationTimestampFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expirationTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpirationTimestamp {
      get { return expirationTimestamp_; }
      set {
        expirationTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "is_sufficient_commitments_collected" field.</summary>
    public const int IsSufficientCommitmentsCollectedFieldNumber = 5;
    private bool isSufficientCommitmentsCollected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSufficientCommitmentsCollected {
      get { return isSufficientCommitmentsCollected_; }
      set {
        isSufficientCommitmentsCollected_ = value;
      }
    }

    /// <summary>Field number for the "is_sufficient_data_collected" field.</summary>
    public const int IsSufficientDataCollectedFieldNumber = 6;
    private bool isSufficientDataCollected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSufficientDataCollected {
      get { return isSufficientDataCollected_; }
      set {
        isSufficientDataCollected_ = value;
      }
    }

    /// <summary>Field number for the "final_result" field.</summary>
    public const int FinalResultFieldNumber = 7;
    private pb::ByteString finalResult_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FinalResult {
      get { return finalResult_; }
      set {
        finalResult_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment" field.</summary>
    public const int PaymentFieldNumber = 8;
    private long payment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Payment {
      get { return payment_; }
      set {
        payment_ = value;
      }
    }

    /// <summary>Field number for the "callback_info" field.</summary>
    public const int CallbackInfoFieldNumber = 9;
    private global::AElf.Contracts.Oracle.CallbackInfo callbackInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Oracle.CallbackInfo CallbackInfo {
      get { return callbackInfo_; }
      set {
        callbackInfo_ = value;
      }
    }

    /// <summary>Field number for the "query_id" field.</summary>
    public const int QueryIdFieldNumber = 10;
    private global::AElf.Types.Hash queryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash QueryId {
      get { return queryId_; }
      set {
        queryId_ = value;
      }
    }

    /// <summary>Field number for the "aggregate_threshold" field.</summary>
    public const int AggregateThresholdFieldNumber = 11;
    private int aggregateThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AggregateThreshold {
      get { return aggregateThreshold_; }
      set {
        aggregateThreshold_ = value;
      }
    }

    /// <summary>Field number for the "query_sender" field.</summary>
    public const int QuerySenderFieldNumber = 12;
    private global::AElf.Types.Address querySender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address QuerySender {
      get { return querySender_; }
      set {
        querySender_ = value;
      }
    }

    /// <summary>Field number for the "is_commit_stage_finished" field.</summary>
    public const int IsCommitStageFinishedFieldNumber = 13;
    private bool isCommitStageFinished_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCommitStageFinished {
      get { return isCommitStageFinished_; }
      set {
        isCommitStageFinished_ = value;
      }
    }

    /// <summary>Field number for the "commitments_count" field.</summary>
    public const int CommitmentsCountFieldNumber = 14;
    private int commitmentsCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CommitmentsCount {
      get { return commitmentsCount_; }
      set {
        commitmentsCount_ = value;
      }
    }

    /// <summary>Field number for the "is_cancelled" field.</summary>
    public const int IsCancelledFieldNumber = 15;
    private bool isCancelled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCancelled {
      get { return isCancelled_; }
      set {
        isCancelled_ = value;
      }
    }

    /// <summary>Field number for the "url_to_query" field.</summary>
    public const int UrlToQueryFieldNumber = 16;
    private string urlToQuery_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UrlToQuery {
      get { return urlToQuery_; }
      set {
        urlToQuery_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attribute_to_fetch" field.</summary>
    public const int AttributeToFetchFieldNumber = 17;
    private string attributeToFetch_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AttributeToFetch {
      get { return attributeToFetch_; }
      set {
        attributeToFetch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 18;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DesignatedNodeList, other.DesignatedNodeList)) return false;
      if (!object.Equals(AggregatorContractAddress, other.AggregatorContractAddress)) return false;
      if (!object.Equals(ExpirationTimestamp, other.ExpirationTimestamp)) return false;
      if (IsSufficientCommitmentsCollected != other.IsSufficientCommitmentsCollected) return false;
      if (IsSufficientDataCollected != other.IsSufficientDataCollected) return false;
      if (FinalResult != other.FinalResult) return false;
      if (Payment != other.Payment) return false;
      if (!object.Equals(CallbackInfo, other.CallbackInfo)) return false;
      if (!object.Equals(QueryId, other.QueryId)) return false;
      if (AggregateThreshold != other.AggregateThreshold) return false;
      if (!object.Equals(QuerySender, other.QuerySender)) return false;
      if (IsCommitStageFinished != other.IsCommitStageFinished) return false;
      if (CommitmentsCount != other.CommitmentsCount) return false;
      if (IsCancelled != other.IsCancelled) return false;
      if (UrlToQuery != other.UrlToQuery) return false;
      if (AttributeToFetch != other.AttributeToFetch) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (designatedNodeList_ != null) hash ^= DesignatedNodeList.GetHashCode();
      if (aggregatorContractAddress_ != null) hash ^= AggregatorContractAddress.GetHashCode();
      if (expirationTimestamp_ != null) hash ^= ExpirationTimestamp.GetHashCode();
      if (IsSufficientCommitmentsCollected != false) hash ^= IsSufficientCommitmentsCollected.GetHashCode();
      if (IsSufficientDataCollected != false) hash ^= IsSufficientDataCollected.GetHashCode();
      if (FinalResult.Length != 0) hash ^= FinalResult.GetHashCode();
      if (Payment != 0L) hash ^= Payment.GetHashCode();
      if (callbackInfo_ != null) hash ^= CallbackInfo.GetHashCode();
      if (queryId_ != null) hash ^= QueryId.GetHashCode();
      if (AggregateThreshold != 0) hash ^= AggregateThreshold.GetHashCode();
      if (querySender_ != null) hash ^= QuerySender.GetHashCode();
      if (IsCommitStageFinished != false) hash ^= IsCommitStageFinished.GetHashCode();
      if (CommitmentsCount != 0) hash ^= CommitmentsCount.GetHashCode();
      if (IsCancelled != false) hash ^= IsCancelled.GetHashCode();
      if (UrlToQuery.Length != 0) hash ^= UrlToQuery.GetHashCode();
      if (AttributeToFetch.Length != 0) hash ^= AttributeToFetch.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (designatedNodeList_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DesignatedNodeList);
      }
      if (aggregatorContractAddress_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AggregatorContractAddress);
      }
      if (expirationTimestamp_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ExpirationTimestamp);
      }
      if (IsSufficientCommitmentsCollected != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsSufficientCommitmentsCollected);
      }
      if (IsSufficientDataCollected != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsSufficientDataCollected);
      }
      if (FinalResult.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(FinalResult);
      }
      if (Payment != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Payment);
      }
      if (callbackInfo_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(CallbackInfo);
      }
      if (queryId_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(QueryId);
      }
      if (AggregateThreshold != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(AggregateThreshold);
      }
      if (querySender_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(QuerySender);
      }
      if (IsCommitStageFinished != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsCommitStageFinished);
      }
      if (CommitmentsCount != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(CommitmentsCount);
      }
      if (IsCancelled != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsCancelled);
      }
      if (UrlToQuery.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(UrlToQuery);
      }
      if (AttributeToFetch.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(AttributeToFetch);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (designatedNodeList_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DesignatedNodeList);
      }
      if (aggregatorContractAddress_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AggregatorContractAddress);
      }
      if (expirationTimestamp_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ExpirationTimestamp);
      }
      if (IsSufficientCommitmentsCollected != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsSufficientCommitmentsCollected);
      }
      if (IsSufficientDataCollected != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsSufficientDataCollected);
      }
      if (FinalResult.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(FinalResult);
      }
      if (Payment != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Payment);
      }
      if (callbackInfo_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(CallbackInfo);
      }
      if (queryId_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(QueryId);
      }
      if (AggregateThreshold != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(AggregateThreshold);
      }
      if (querySender_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(QuerySender);
      }
      if (IsCommitStageFinished != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsCommitStageFinished);
      }
      if (CommitmentsCount != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(CommitmentsCount);
      }
      if (IsCancelled != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsCancelled);
      }
      if (UrlToQuery.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(UrlToQuery);
      }
      if (AttributeToFetch.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(AttributeToFetch);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (designatedNodeList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DesignatedNodeList);
      }
      if (aggregatorContractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AggregatorContractAddress);
      }
      if (expirationTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpirationTimestamp);
      }
      if (IsSufficientCommitmentsCollected != false) {
        size += 1 + 1;
      }
      if (IsSufficientDataCollected != false) {
        size += 1 + 1;
      }
      if (FinalResult.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FinalResult);
      }
      if (Payment != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Payment);
      }
      if (callbackInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CallbackInfo);
      }
      if (queryId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryId);
      }
      if (AggregateThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AggregateThreshold);
      }
      if (querySender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QuerySender);
      }
      if (IsCommitStageFinished != false) {
        size += 1 + 1;
      }
      if (CommitmentsCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CommitmentsCount);
      }
      if (IsCancelled != false) {
        size += 1 + 1;
      }
      if (UrlToQuery.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UrlToQuery);
      }
      if (AttributeToFetch.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AttributeToFetch);
      }
      if (Token.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryRecord other) {
      if (other == null) {
        return;
      }
      if (other.designatedNodeList_ != null) {
        if (designatedNodeList_ == null) {
          DesignatedNodeList = new global::AElf.Contracts.Oracle.AddressList();
        }
        DesignatedNodeList.MergeFrom(other.DesignatedNodeList);
      }
      if (other.aggregatorContractAddress_ != null) {
        if (aggregatorContractAddress_ == null) {
          AggregatorContractAddress = new global::AElf.Types.Address();
        }
        AggregatorContractAddress.MergeFrom(other.AggregatorContractAddress);
      }
      if (other.expirationTimestamp_ != null) {
        if (expirationTimestamp_ == null) {
          ExpirationTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpirationTimestamp.MergeFrom(other.ExpirationTimestamp);
      }
      if (other.IsSufficientCommitmentsCollected != false) {
        IsSufficientCommitmentsCollected = other.IsSufficientCommitmentsCollected;
      }
      if (other.IsSufficientDataCollected != false) {
        IsSufficientDataCollected = other.IsSufficientDataCollected;
      }
      if (other.FinalResult.Length != 0) {
        FinalResult = other.FinalResult;
      }
      if (other.Payment != 0L) {
        Payment = other.Payment;
      }
      if (other.callbackInfo_ != null) {
        if (callbackInfo_ == null) {
          CallbackInfo = new global::AElf.Contracts.Oracle.CallbackInfo();
        }
        CallbackInfo.MergeFrom(other.CallbackInfo);
      }
      if (other.queryId_ != null) {
        if (queryId_ == null) {
          QueryId = new global::AElf.Types.Hash();
        }
        QueryId.MergeFrom(other.QueryId);
      }
      if (other.AggregateThreshold != 0) {
        AggregateThreshold = other.AggregateThreshold;
      }
      if (other.querySender_ != null) {
        if (querySender_ == null) {
          QuerySender = new global::AElf.Types.Address();
        }
        QuerySender.MergeFrom(other.QuerySender);
      }
      if (other.IsCommitStageFinished != false) {
        IsCommitStageFinished = other.IsCommitStageFinished;
      }
      if (other.CommitmentsCount != 0) {
        CommitmentsCount = other.CommitmentsCount;
      }
      if (other.IsCancelled != false) {
        IsCancelled = other.IsCancelled;
      }
      if (other.UrlToQuery.Length != 0) {
        UrlToQuery = other.UrlToQuery;
      }
      if (other.AttributeToFetch.Length != 0) {
        AttributeToFetch = other.AttributeToFetch;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            if (designatedNodeList_ == null) {
              DesignatedNodeList = new global::AElf.Contracts.Oracle.AddressList();
            }
            input.ReadMessage(DesignatedNodeList);
            break;
          }
          case 26: {
            if (aggregatorContractAddress_ == null) {
              AggregatorContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(AggregatorContractAddress);
            break;
          }
          case 34: {
            if (expirationTimestamp_ == null) {
              ExpirationTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpirationTimestamp);
            break;
          }
          case 40: {
            IsSufficientCommitmentsCollected = input.ReadBool();
            break;
          }
          case 48: {
            IsSufficientDataCollected = input.ReadBool();
            break;
          }
          case 58: {
            FinalResult = input.ReadBytes();
            break;
          }
          case 64: {
            Payment = input.ReadInt64();
            break;
          }
          case 74: {
            if (callbackInfo_ == null) {
              CallbackInfo = new global::AElf.Contracts.Oracle.CallbackInfo();
            }
            input.ReadMessage(CallbackInfo);
            break;
          }
          case 82: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 88: {
            AggregateThreshold = input.ReadInt32();
            break;
          }
          case 98: {
            if (querySender_ == null) {
              QuerySender = new global::AElf.Types.Address();
            }
            input.ReadMessage(QuerySender);
            break;
          }
          case 104: {
            IsCommitStageFinished = input.ReadBool();
            break;
          }
          case 112: {
            CommitmentsCount = input.ReadInt32();
            break;
          }
          case 120: {
            IsCancelled = input.ReadBool();
            break;
          }
          case 130: {
            UrlToQuery = input.ReadString();
            break;
          }
          case 138: {
            AttributeToFetch = input.ReadString();
            break;
          }
          case 146: {
            Token = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            if (designatedNodeList_ == null) {
              DesignatedNodeList = new global::AElf.Contracts.Oracle.AddressList();
            }
            input.ReadMessage(DesignatedNodeList);
            break;
          }
          case 26: {
            if (aggregatorContractAddress_ == null) {
              AggregatorContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(AggregatorContractAddress);
            break;
          }
          case 34: {
            if (expirationTimestamp_ == null) {
              ExpirationTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpirationTimestamp);
            break;
          }
          case 40: {
            IsSufficientCommitmentsCollected = input.ReadBool();
            break;
          }
          case 48: {
            IsSufficientDataCollected = input.ReadBool();
            break;
          }
          case 58: {
            FinalResult = input.ReadBytes();
            break;
          }
          case 64: {
            Payment = input.ReadInt64();
            break;
          }
          case 74: {
            if (callbackInfo_ == null) {
              CallbackInfo = new global::AElf.Contracts.Oracle.CallbackInfo();
            }
            input.ReadMessage(CallbackInfo);
            break;
          }
          case 82: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 88: {
            AggregateThreshold = input.ReadInt32();
            break;
          }
          case 98: {
            if (querySender_ == null) {
              QuerySender = new global::AElf.Types.Address();
            }
            input.ReadMessage(QuerySender);
            break;
          }
          case 104: {
            IsCommitStageFinished = input.ReadBool();
            break;
          }
          case 112: {
            CommitmentsCount = input.ReadInt32();
            break;
          }
          case 120: {
            IsCancelled = input.ReadBool();
            break;
          }
          case 130: {
            UrlToQuery = input.ReadString();
            break;
          }
          case 138: {
            AttributeToFetch = input.ReadString();
            break;
          }
          case 146: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CommitInput : pb::IMessage<CommitInput>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommitInput> _parser = new pb::MessageParser<CommitInput>(() => new CommitInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommitInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitInput(CommitInput other) : this() {
      queryId_ = other.queryId_ != null ? other.queryId_.Clone() : null;
      commitment_ = other.commitment_ != null ? other.commitment_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitInput Clone() {
      return new CommitInput(this);
    }

    /// <summary>Field number for the "query_id" field.</summary>
    public const int QueryIdFieldNumber = 1;
    private global::AElf.Types.Hash queryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash QueryId {
      get { return queryId_; }
      set {
        queryId_ = value;
      }
    }

    /// <summary>Field number for the "commitment" field.</summary>
    public const int CommitmentFieldNumber = 2;
    private global::AElf.Types.Hash commitment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Commitment {
      get { return commitment_; }
      set {
        commitment_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommitInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommitInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(QueryId, other.QueryId)) return false;
      if (!object.Equals(Commitment, other.Commitment)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (queryId_ != null) hash ^= QueryId.GetHashCode();
      if (commitment_ != null) hash ^= Commitment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (commitment_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Commitment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (commitment_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Commitment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (queryId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryId);
      }
      if (commitment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Commitment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommitInput other) {
      if (other == null) {
        return;
      }
      if (other.queryId_ != null) {
        if (queryId_ == null) {
          QueryId = new global::AElf.Types.Hash();
        }
        QueryId.MergeFrom(other.QueryId);
      }
      if (other.commitment_ != null) {
        if (commitment_ == null) {
          Commitment = new global::AElf.Types.Hash();
        }
        Commitment.MergeFrom(other.Commitment);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 18: {
            if (commitment_ == null) {
              Commitment = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Commitment);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 18: {
            if (commitment_ == null) {
              Commitment = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Commitment);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RevealInput : pb::IMessage<RevealInput>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RevealInput> _parser = new pb::MessageParser<RevealInput>(() => new RevealInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RevealInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevealInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevealInput(RevealInput other) : this() {
      queryId_ = other.queryId_ != null ? other.queryId_.Clone() : null;
      data_ = other.data_;
      salt_ = other.salt_ != null ? other.salt_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevealInput Clone() {
      return new RevealInput(this);
    }

    /// <summary>Field number for the "query_id" field.</summary>
    public const int QueryIdFieldNumber = 1;
    private global::AElf.Types.Hash queryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash QueryId {
      get { return queryId_; }
      set {
        queryId_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "salt" field.</summary>
    public const int SaltFieldNumber = 3;
    private global::AElf.Types.Hash salt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Salt {
      get { return salt_; }
      set {
        salt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RevealInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RevealInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(QueryId, other.QueryId)) return false;
      if (Data != other.Data) return false;
      if (!object.Equals(Salt, other.Salt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (queryId_ != null) hash ^= QueryId.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (salt_ != null) hash ^= Salt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (salt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Salt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (salt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Salt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (queryId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryId);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (salt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Salt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RevealInput other) {
      if (other == null) {
        return;
      }
      if (other.queryId_ != null) {
        if (queryId_ == null) {
          QueryId = new global::AElf.Types.Hash();
        }
        QueryId.MergeFrom(other.QueryId);
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.salt_ != null) {
        if (salt_ == null) {
          Salt = new global::AElf.Types.Hash();
        }
        Salt.MergeFrom(other.Salt);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
          case 26: {
            if (salt_ == null) {
              Salt = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Salt);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
          case 26: {
            if (salt_ == null) {
              Salt = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Salt);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CommitmentMap : pb::IMessage<CommitmentMap>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommitmentMap> _parser = new pb::MessageParser<CommitmentMap>(() => new CommitmentMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommitmentMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitmentMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitmentMap(CommitmentMap other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitmentMap Clone() {
      return new CommitmentMap(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pbc::MapField<string, global::AElf.Types.Hash>.Codec _map_value_codec
        = new pbc::MapField<string, global::AElf.Types.Hash>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::AElf.Types.Hash.Parser), 10);
    private readonly pbc::MapField<string, global::AElf.Types.Hash> value_ = new pbc::MapField<string, global::AElf.Types.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::AElf.Types.Hash> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommitmentMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommitmentMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Value.Equals(other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      value_.WriteTo(output, _map_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      value_.WriteTo(ref output, _map_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_map_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommitmentMap other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _map_value_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            value_.AddEntriesFrom(ref input, _map_value_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SetThresholdInput : pb::IMessage<SetThresholdInput>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SetThresholdInput> _parser = new pb::MessageParser<SetThresholdInput>(() => new SetThresholdInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetThresholdInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetThresholdInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetThresholdInput(SetThresholdInput other) : this() {
      minimumOracleNodesCount_ = other.minimumOracleNodesCount_;
      defaultRevealThreshold_ = other.defaultRevealThreshold_;
      defaultAggregateThreshold_ = other.defaultAggregateThreshold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetThresholdInput Clone() {
      return new SetThresholdInput(this);
    }

    /// <summary>Field number for the "minimum_oracle_nodes_count" field.</summary>
    public const int MinimumOracleNodesCountFieldNumber = 1;
    private int minimumOracleNodesCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinimumOracleNodesCount {
      get { return minimumOracleNodesCount_; }
      set {
        minimumOracleNodesCount_ = value;
      }
    }

    /// <summary>Field number for the "default_reveal_threshold" field.</summary>
    public const int DefaultRevealThresholdFieldNumber = 2;
    private int defaultRevealThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultRevealThreshold {
      get { return defaultRevealThreshold_; }
      set {
        defaultRevealThreshold_ = value;
      }
    }

    /// <summary>Field number for the "default_aggregate_threshold" field.</summary>
    public const int DefaultAggregateThresholdFieldNumber = 3;
    private int defaultAggregateThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefaultAggregateThreshold {
      get { return defaultAggregateThreshold_; }
      set {
        defaultAggregateThreshold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetThresholdInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetThresholdInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinimumOracleNodesCount != other.MinimumOracleNodesCount) return false;
      if (DefaultRevealThreshold != other.DefaultRevealThreshold) return false;
      if (DefaultAggregateThreshold != other.DefaultAggregateThreshold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinimumOracleNodesCount != 0) hash ^= MinimumOracleNodesCount.GetHashCode();
      if (DefaultRevealThreshold != 0) hash ^= DefaultRevealThreshold.GetHashCode();
      if (DefaultAggregateThreshold != 0) hash ^= DefaultAggregateThreshold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MinimumOracleNodesCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MinimumOracleNodesCount);
      }
      if (DefaultRevealThreshold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DefaultRevealThreshold);
      }
      if (DefaultAggregateThreshold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DefaultAggregateThreshold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MinimumOracleNodesCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MinimumOracleNodesCount);
      }
      if (DefaultRevealThreshold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DefaultRevealThreshold);
      }
      if (DefaultAggregateThreshold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DefaultAggregateThreshold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinimumOracleNodesCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinimumOracleNodesCount);
      }
      if (DefaultRevealThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultRevealThreshold);
      }
      if (DefaultAggregateThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultAggregateThreshold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetThresholdInput other) {
      if (other == null) {
        return;
      }
      if (other.MinimumOracleNodesCount != 0) {
        MinimumOracleNodesCount = other.MinimumOracleNodesCount;
      }
      if (other.DefaultRevealThreshold != 0) {
        DefaultRevealThreshold = other.DefaultRevealThreshold;
      }
      if (other.DefaultAggregateThreshold != 0) {
        DefaultAggregateThreshold = other.DefaultAggregateThreshold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinimumOracleNodesCount = input.ReadInt32();
            break;
          }
          case 16: {
            DefaultRevealThreshold = input.ReadInt32();
            break;
          }
          case 24: {
            DefaultAggregateThreshold = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MinimumOracleNodesCount = input.ReadInt32();
            break;
          }
          case 16: {
            DefaultRevealThreshold = input.ReadInt32();
            break;
          }
          case 24: {
            DefaultAggregateThreshold = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ResultList : pb::IMessage<ResultList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ResultList> _parser = new pb::MessageParser<ResultList>(() => new ResultList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResultList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultList(ResultList other) : this() {
      results_ = other.results_.Clone();
      frequencies_ = other.frequencies_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultList Clone() {
      return new ResultList(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_results_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> results_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "frequencies" field.</summary>
    public const int FrequenciesFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_frequencies_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> frequencies_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Frequencies {
      get { return frequencies_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResultList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResultList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      if(!frequencies_.Equals(other.frequencies_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      hash ^= frequencies_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      results_.WriteTo(output, _repeated_results_codec);
      frequencies_.WriteTo(output, _repeated_frequencies_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      results_.WriteTo(ref output, _repeated_results_codec);
      frequencies_.WriteTo(ref output, _repeated_frequencies_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      size += frequencies_.CalculateSize(_repeated_frequencies_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResultList other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
      frequencies_.Add(other.frequencies_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 18:
          case 16: {
            frequencies_.AddEntriesFrom(input, _repeated_frequencies_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            results_.AddEntriesFrom(ref input, _repeated_results_codec);
            break;
          }
          case 18:
          case 16: {
            frequencies_.AddEntriesFrom(ref input, _repeated_frequencies_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NodeData : pb::IMessage<NodeData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NodeData> _parser = new pb::MessageParser<NodeData>(() => new NodeData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeData(NodeData other) : this() {
      address_ = other.address_ != null ? other.address_.Clone() : null;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeData Clone() {
      return new NodeData(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::AElf.Types.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeData other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::AElf.Types.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (address_ == null) {
              Address = new global::AElf.Types.Address();
            }
            input.ReadMessage(Address);
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (address_ == null) {
              Address = new global::AElf.Types.Address();
            }
            input.ReadMessage(Address);
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NodeDataList : pb::IMessage<NodeDataList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NodeDataList> _parser = new pb::MessageParser<NodeDataList>(() => new NodeDataList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeDataList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeDataList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeDataList(NodeDataList other) : this() {
      value_ = other.value_.Clone();
      observerAssociationAddress_ = other.observerAssociationAddress_ != null ? other.observerAssociationAddress_.Clone() : null;
      urlToQuery_ = other.urlToQuery_;
      attributeToFetch_ = other.attributeToFetch_;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeDataList Clone() {
      return new NodeDataList(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Contracts.Oracle.NodeData> _repeated_value_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Contracts.Oracle.NodeData.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.Oracle.NodeData> value_ = new pbc::RepeatedField<global::AElf.Contracts.Oracle.NodeData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.Oracle.NodeData> Value {
      get { return value_; }
    }

    /// <summary>Field number for the "observer_association_address" field.</summary>
    public const int ObserverAssociationAddressFieldNumber = 2;
    private global::AElf.Types.Address observerAssociationAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ObserverAssociationAddress {
      get { return observerAssociationAddress_; }
      set {
        observerAssociationAddress_ = value;
      }
    }

    /// <summary>Field number for the "url_to_query" field.</summary>
    public const int UrlToQueryFieldNumber = 3;
    private string urlToQuery_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UrlToQuery {
      get { return urlToQuery_; }
      set {
        urlToQuery_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attribute_to_fetch" field.</summary>
    public const int AttributeToFetchFieldNumber = 4;
    private string attributeToFetch_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AttributeToFetch {
      get { return attributeToFetch_; }
      set {
        attributeToFetch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 5;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeDataList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeDataList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      if (!object.Equals(ObserverAssociationAddress, other.ObserverAssociationAddress)) return false;
      if (UrlToQuery != other.UrlToQuery) return false;
      if (AttributeToFetch != other.AttributeToFetch) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (observerAssociationAddress_ != null) hash ^= ObserverAssociationAddress.GetHashCode();
      if (UrlToQuery.Length != 0) hash ^= UrlToQuery.GetHashCode();
      if (AttributeToFetch.Length != 0) hash ^= AttributeToFetch.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      value_.WriteTo(output, _repeated_value_codec);
      if (observerAssociationAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ObserverAssociationAddress);
      }
      if (UrlToQuery.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UrlToQuery);
      }
      if (AttributeToFetch.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AttributeToFetch);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      value_.WriteTo(ref output, _repeated_value_codec);
      if (observerAssociationAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ObserverAssociationAddress);
      }
      if (UrlToQuery.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UrlToQuery);
      }
      if (AttributeToFetch.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AttributeToFetch);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (observerAssociationAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObserverAssociationAddress);
      }
      if (UrlToQuery.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UrlToQuery);
      }
      if (AttributeToFetch.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AttributeToFetch);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeDataList other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      if (other.observerAssociationAddress_ != null) {
        if (observerAssociationAddress_ == null) {
          ObserverAssociationAddress = new global::AElf.Types.Address();
        }
        ObserverAssociationAddress.MergeFrom(other.ObserverAssociationAddress);
      }
      if (other.UrlToQuery.Length != 0) {
        UrlToQuery = other.UrlToQuery;
      }
      if (other.AttributeToFetch.Length != 0) {
        AttributeToFetch = other.AttributeToFetch;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
          case 18: {
            if (observerAssociationAddress_ == null) {
              ObserverAssociationAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ObserverAssociationAddress);
            break;
          }
          case 26: {
            UrlToQuery = input.ReadString();
            break;
          }
          case 34: {
            AttributeToFetch = input.ReadString();
            break;
          }
          case 42: {
            Token = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            value_.AddEntriesFrom(ref input, _repeated_value_codec);
            break;
          }
          case 18: {
            if (observerAssociationAddress_ == null) {
              ObserverAssociationAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ObserverAssociationAddress);
            break;
          }
          case 26: {
            UrlToQuery = input.ReadString();
            break;
          }
          case 34: {
            AttributeToFetch = input.ReadString();
            break;
          }
          case 42: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Events
  /// </summary>
  public sealed partial class QueryCreated : pb::IMessage<QueryCreated>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<QueryCreated> _parser = new pb::MessageParser<QueryCreated>(() => new QueryCreated());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryCreated> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCreated() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCreated(QueryCreated other) : this() {
      payment_ = other.payment_;
      callbackInfo_ = other.callbackInfo_ != null ? other.callbackInfo_.Clone() : null;
      aggregatorContractAddress_ = other.aggregatorContractAddress_ != null ? other.aggregatorContractAddress_.Clone() : null;
      designatedNodeList_ = other.designatedNodeList_ != null ? other.designatedNodeList_.Clone() : null;
      urlToQuery_ = other.urlToQuery_;
      attributeToFetch_ = other.attributeToFetch_;
      aggregateThreshold_ = other.aggregateThreshold_;
      queryManager_ = other.queryManager_ != null ? other.queryManager_.Clone() : null;
      queryId_ = other.queryId_ != null ? other.queryId_.Clone() : null;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCreated Clone() {
      return new QueryCreated(this);
    }

    /// <summary>Field number for the "payment" field.</summary>
    public const int PaymentFieldNumber = 1;
    private long payment_;
    /// <summary>
    /// Maximum for this query option.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Payment {
      get { return payment_; }
      set {
        payment_ = value;
      }
    }

    /// <summary>Field number for the "callback_info" field.</summary>
    public const int CallbackInfoFieldNumber = 2;
    private global::AElf.Contracts.Oracle.CallbackInfo callbackInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Oracle.CallbackInfo CallbackInfo {
      get { return callbackInfo_; }
      set {
        callbackInfo_ = value;
      }
    }

    /// <summary>Field number for the "aggregator_contract_address" field.</summary>
    public const int AggregatorContractAddressFieldNumber = 3;
    private global::AElf.Types.Address aggregatorContractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address AggregatorContractAddress {
      get { return aggregatorContractAddress_; }
      set {
        aggregatorContractAddress_ = value;
      }
    }

    /// <summary>Field number for the "designated_node_list" field.</summary>
    public const int DesignatedNodeListFieldNumber = 4;
    private global::AElf.Contracts.Oracle.AddressList designatedNodeList_;
    /// <summary>
    /// Will be association address if count is 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.Oracle.AddressList DesignatedNodeList {
      get { return designatedNodeList_; }
      set {
        designatedNodeList_ = value;
      }
    }

    /// <summary>Field number for the "url_to_query" field.</summary>
    public const int UrlToQueryFieldNumber = 5;
    private string urlToQuery_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UrlToQuery {
      get { return urlToQuery_; }
      set {
        urlToQuery_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attribute_to_fetch" field.</summary>
    public const int AttributeToFetchFieldNumber = 6;
    private string attributeToFetch_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AttributeToFetch {
      get { return attributeToFetch_; }
      set {
        attributeToFetch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aggregate_threshold" field.</summary>
    public const int AggregateThresholdFieldNumber = 7;
    private int aggregateThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AggregateThreshold {
      get { return aggregateThreshold_; }
      set {
        aggregateThreshold_ = value;
      }
    }

    /// <summary>Field number for the "query_manager" field.</summary>
    public const int QueryManagerFieldNumber = 8;
    private global::AElf.Types.Address queryManager_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address QueryManager {
      get { return queryManager_; }
      set {
        queryManager_ = value;
      }
    }

    /// <summary>Field number for the "query_id" field.</summary>
    public const int QueryIdFieldNumber = 9;
    private global::AElf.Types.Hash queryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash QueryId {
      get { return queryId_; }
      set {
        queryId_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 10;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryCreated);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryCreated other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payment != other.Payment) return false;
      if (!object.Equals(CallbackInfo, other.CallbackInfo)) return false;
      if (!object.Equals(AggregatorContractAddress, other.AggregatorContractAddress)) return false;
      if (!object.Equals(DesignatedNodeList, other.DesignatedNodeList)) return false;
      if (UrlToQuery != other.UrlToQuery) return false;
      if (AttributeToFetch != other.AttributeToFetch) return false;
      if (AggregateThreshold != other.AggregateThreshold) return false;
      if (!object.Equals(QueryManager, other.QueryManager)) return false;
      if (!object.Equals(QueryId, other.QueryId)) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payment != 0L) hash ^= Payment.GetHashCode();
      if (callbackInfo_ != null) hash ^= CallbackInfo.GetHashCode();
      if (aggregatorContractAddress_ != null) hash ^= AggregatorContractAddress.GetHashCode();
      if (designatedNodeList_ != null) hash ^= DesignatedNodeList.GetHashCode();
      if (UrlToQuery.Length != 0) hash ^= UrlToQuery.GetHashCode();
      if (AttributeToFetch.Length != 0) hash ^= AttributeToFetch.GetHashCode();
      if (AggregateThreshold != 0) hash ^= AggregateThreshold.GetHashCode();
      if (queryManager_ != null) hash ^= QueryManager.GetHashCode();
      if (queryId_ != null) hash ^= QueryId.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Payment != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Payment);
      }
      if (callbackInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CallbackInfo);
      }
      if (aggregatorContractAddress_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AggregatorContractAddress);
      }
      if (designatedNodeList_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DesignatedNodeList);
      }
      if (UrlToQuery.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UrlToQuery);
      }
      if (AttributeToFetch.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AttributeToFetch);
      }
      if (AggregateThreshold != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AggregateThreshold);
      }
      if (queryManager_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(QueryManager);
      }
      if (queryId_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(QueryId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Payment != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Payment);
      }
      if (callbackInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CallbackInfo);
      }
      if (aggregatorContractAddress_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AggregatorContractAddress);
      }
      if (designatedNodeList_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DesignatedNodeList);
      }
      if (UrlToQuery.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UrlToQuery);
      }
      if (AttributeToFetch.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AttributeToFetch);
      }
      if (AggregateThreshold != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AggregateThreshold);
      }
      if (queryManager_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(QueryManager);
      }
      if (queryId_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(QueryId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payment != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Payment);
      }
      if (callbackInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CallbackInfo);
      }
      if (aggregatorContractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AggregatorContractAddress);
      }
      if (designatedNodeList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DesignatedNodeList);
      }
      if (UrlToQuery.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UrlToQuery);
      }
      if (AttributeToFetch.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AttributeToFetch);
      }
      if (AggregateThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AggregateThreshold);
      }
      if (queryManager_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryManager);
      }
      if (queryId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryCreated other) {
      if (other == null) {
        return;
      }
      if (other.Payment != 0L) {
        Payment = other.Payment;
      }
      if (other.callbackInfo_ != null) {
        if (callbackInfo_ == null) {
          CallbackInfo = new global::AElf.Contracts.Oracle.CallbackInfo();
        }
        CallbackInfo.MergeFrom(other.CallbackInfo);
      }
      if (other.aggregatorContractAddress_ != null) {
        if (aggregatorContractAddress_ == null) {
          AggregatorContractAddress = new global::AElf.Types.Address();
        }
        AggregatorContractAddress.MergeFrom(other.AggregatorContractAddress);
      }
      if (other.designatedNodeList_ != null) {
        if (designatedNodeList_ == null) {
          DesignatedNodeList = new global::AElf.Contracts.Oracle.AddressList();
        }
        DesignatedNodeList.MergeFrom(other.DesignatedNodeList);
      }
      if (other.UrlToQuery.Length != 0) {
        UrlToQuery = other.UrlToQuery;
      }
      if (other.AttributeToFetch.Length != 0) {
        AttributeToFetch = other.AttributeToFetch;
      }
      if (other.AggregateThreshold != 0) {
        AggregateThreshold = other.AggregateThreshold;
      }
      if (other.queryManager_ != null) {
        if (queryManager_ == null) {
          QueryManager = new global::AElf.Types.Address();
        }
        QueryManager.MergeFrom(other.QueryManager);
      }
      if (other.queryId_ != null) {
        if (queryId_ == null) {
          QueryId = new global::AElf.Types.Hash();
        }
        QueryId.MergeFrom(other.QueryId);
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Payment = input.ReadInt64();
            break;
          }
          case 18: {
            if (callbackInfo_ == null) {
              CallbackInfo = new global::AElf.Contracts.Oracle.CallbackInfo();
            }
            input.ReadMessage(CallbackInfo);
            break;
          }
          case 26: {
            if (aggregatorContractAddress_ == null) {
              AggregatorContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(AggregatorContractAddress);
            break;
          }
          case 34: {
            if (designatedNodeList_ == null) {
              DesignatedNodeList = new global::AElf.Contracts.Oracle.AddressList();
            }
            input.ReadMessage(DesignatedNodeList);
            break;
          }
          case 42: {
            UrlToQuery = input.ReadString();
            break;
          }
          case 50: {
            AttributeToFetch = input.ReadString();
            break;
          }
          case 56: {
            AggregateThreshold = input.ReadInt32();
            break;
          }
          case 66: {
            if (queryManager_ == null) {
              QueryManager = new global::AElf.Types.Address();
            }
            input.ReadMessage(QueryManager);
            break;
          }
          case 74: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 82: {
            Token = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Payment = input.ReadInt64();
            break;
          }
          case 18: {
            if (callbackInfo_ == null) {
              CallbackInfo = new global::AElf.Contracts.Oracle.CallbackInfo();
            }
            input.ReadMessage(CallbackInfo);
            break;
          }
          case 26: {
            if (aggregatorContractAddress_ == null) {
              AggregatorContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(AggregatorContractAddress);
            break;
          }
          case 34: {
            if (designatedNodeList_ == null) {
              DesignatedNodeList = new global::AElf.Contracts.Oracle.AddressList();
            }
            input.ReadMessage(DesignatedNodeList);
            break;
          }
          case 42: {
            UrlToQuery = input.ReadString();
            break;
          }
          case 50: {
            AttributeToFetch = input.ReadString();
            break;
          }
          case 56: {
            AggregateThreshold = input.ReadInt32();
            break;
          }
          case 66: {
            if (queryManager_ == null) {
              QueryManager = new global::AElf.Types.Address();
            }
            input.ReadMessage(QueryManager);
            break;
          }
          case 74: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 82: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class QueryCancelled : pb::IMessage<QueryCancelled>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<QueryCancelled> _parser = new pb::MessageParser<QueryCancelled>(() => new QueryCancelled());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryCancelled> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCancelled() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCancelled(QueryCancelled other) : this() {
      queryId_ = other.queryId_;
      cancelTime_ = other.cancelTime_ != null ? other.cancelTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCancelled Clone() {
      return new QueryCancelled(this);
    }

    /// <summary>Field number for the "query_id" field.</summary>
    public const int QueryIdFieldNumber = 1;
    private pb::ByteString queryId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString QueryId {
      get { return queryId_; }
      set {
        queryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cancel_time" field.</summary>
    public const int CancelTimeFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp cancelTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CancelTime {
      get { return cancelTime_; }
      set {
        cancelTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryCancelled);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryCancelled other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (QueryId != other.QueryId) return false;
      if (!object.Equals(CancelTime, other.CancelTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (QueryId.Length != 0) hash ^= QueryId.GetHashCode();
      if (cancelTime_ != null) hash ^= CancelTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (QueryId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(QueryId);
      }
      if (cancelTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CancelTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (QueryId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(QueryId);
      }
      if (cancelTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CancelTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (QueryId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(QueryId);
      }
      if (cancelTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CancelTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryCancelled other) {
      if (other == null) {
        return;
      }
      if (other.QueryId.Length != 0) {
        QueryId = other.QueryId;
      }
      if (other.cancelTime_ != null) {
        if (cancelTime_ == null) {
          CancelTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CancelTime.MergeFrom(other.CancelTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            QueryId = input.ReadBytes();
            break;
          }
          case 18: {
            if (cancelTime_ == null) {
              CancelTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CancelTime);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            QueryId = input.ReadBytes();
            break;
          }
          case 18: {
            if (cancelTime_ == null) {
              CancelTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CancelTime);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SufficientDataCollected : pb::IMessage<SufficientDataCollected>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SufficientDataCollected> _parser = new pb::MessageParser<SufficientDataCollected>(() => new SufficientDataCollected());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SufficientDataCollected> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SufficientDataCollected() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SufficientDataCollected(SufficientDataCollected other) : this() {
      requestId_ = other.requestId_ != null ? other.requestId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SufficientDataCollected Clone() {
      return new SufficientDataCollected(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private global::AElf.Types.Hash requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SufficientDataCollected);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SufficientDataCollected other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RequestId, other.RequestId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (requestId_ != null) hash ^= RequestId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (requestId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RequestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (requestId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RequestId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (requestId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SufficientDataCollected other) {
      if (other == null) {
        return;
      }
      if (other.requestId_ != null) {
        if (requestId_ == null) {
          RequestId = new global::AElf.Types.Hash();
        }
        RequestId.MergeFrom(other.RequestId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (requestId_ == null) {
              RequestId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(RequestId);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (requestId_ == null) {
              RequestId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(RequestId);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SufficientCommitmentsCollected : pb::IMessage<SufficientCommitmentsCollected>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SufficientCommitmentsCollected> _parser = new pb::MessageParser<SufficientCommitmentsCollected>(() => new SufficientCommitmentsCollected());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SufficientCommitmentsCollected> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SufficientCommitmentsCollected() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SufficientCommitmentsCollected(SufficientCommitmentsCollected other) : this() {
      queryId_ = other.queryId_ != null ? other.queryId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SufficientCommitmentsCollected Clone() {
      return new SufficientCommitmentsCollected(this);
    }

    /// <summary>Field number for the "query_id" field.</summary>
    public const int QueryIdFieldNumber = 1;
    private global::AElf.Types.Hash queryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash QueryId {
      get { return queryId_; }
      set {
        queryId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SufficientCommitmentsCollected);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SufficientCommitmentsCollected other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(QueryId, other.QueryId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (queryId_ != null) hash ^= QueryId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (queryId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SufficientCommitmentsCollected other) {
      if (other == null) {
        return;
      }
      if (other.queryId_ != null) {
        if (queryId_ == null) {
          QueryId = new global::AElf.Types.Hash();
        }
        QueryId.MergeFrom(other.QueryId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CommitmentRevealed : pb::IMessage<CommitmentRevealed>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommitmentRevealed> _parser = new pb::MessageParser<CommitmentRevealed>(() => new CommitmentRevealed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommitmentRevealed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitmentRevealed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitmentRevealed(CommitmentRevealed other) : this() {
      queryId_ = other.queryId_ != null ? other.queryId_.Clone() : null;
      oracleNodeAddress_ = other.oracleNodeAddress_ != null ? other.oracleNodeAddress_.Clone() : null;
      commitment_ = other.commitment_ != null ? other.commitment_.Clone() : null;
      data_ = other.data_;
      salt_ = other.salt_ != null ? other.salt_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommitmentRevealed Clone() {
      return new CommitmentRevealed(this);
    }

    /// <summary>Field number for the "query_id" field.</summary>
    public const int QueryIdFieldNumber = 1;
    private global::AElf.Types.Hash queryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash QueryId {
      get { return queryId_; }
      set {
        queryId_ = value;
      }
    }

    /// <summary>Field number for the "oracle_node_address" field.</summary>
    public const int OracleNodeAddressFieldNumber = 2;
    private global::AElf.Types.Address oracleNodeAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address OracleNodeAddress {
      get { return oracleNodeAddress_; }
      set {
        oracleNodeAddress_ = value;
      }
    }

    /// <summary>Field number for the "commitment" field.</summary>
    public const int CommitmentFieldNumber = 3;
    private global::AElf.Types.Hash commitment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Commitment {
      get { return commitment_; }
      set {
        commitment_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "salt" field.</summary>
    public const int SaltFieldNumber = 5;
    private global::AElf.Types.Hash salt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash Salt {
      get { return salt_; }
      set {
        salt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommitmentRevealed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommitmentRevealed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(QueryId, other.QueryId)) return false;
      if (!object.Equals(OracleNodeAddress, other.OracleNodeAddress)) return false;
      if (!object.Equals(Commitment, other.Commitment)) return false;
      if (Data != other.Data) return false;
      if (!object.Equals(Salt, other.Salt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (queryId_ != null) hash ^= QueryId.GetHashCode();
      if (oracleNodeAddress_ != null) hash ^= OracleNodeAddress.GetHashCode();
      if (commitment_ != null) hash ^= Commitment.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (salt_ != null) hash ^= Salt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (oracleNodeAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OracleNodeAddress);
      }
      if (commitment_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Commitment);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
      if (salt_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Salt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (oracleNodeAddress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OracleNodeAddress);
      }
      if (commitment_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Commitment);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
      if (salt_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Salt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (queryId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryId);
      }
      if (oracleNodeAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OracleNodeAddress);
      }
      if (commitment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Commitment);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (salt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Salt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommitmentRevealed other) {
      if (other == null) {
        return;
      }
      if (other.queryId_ != null) {
        if (queryId_ == null) {
          QueryId = new global::AElf.Types.Hash();
        }
        QueryId.MergeFrom(other.QueryId);
      }
      if (other.oracleNodeAddress_ != null) {
        if (oracleNodeAddress_ == null) {
          OracleNodeAddress = new global::AElf.Types.Address();
        }
        OracleNodeAddress.MergeFrom(other.OracleNodeAddress);
      }
      if (other.commitment_ != null) {
        if (commitment_ == null) {
          Commitment = new global::AElf.Types.Hash();
        }
        Commitment.MergeFrom(other.Commitment);
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.salt_ != null) {
        if (salt_ == null) {
          Salt = new global::AElf.Types.Hash();
        }
        Salt.MergeFrom(other.Salt);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 18: {
            if (oracleNodeAddress_ == null) {
              OracleNodeAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(OracleNodeAddress);
            break;
          }
          case 26: {
            if (commitment_ == null) {
              Commitment = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Commitment);
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
          case 42: {
            if (salt_ == null) {
              Salt = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Salt);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 18: {
            if (oracleNodeAddress_ == null) {
              OracleNodeAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(OracleNodeAddress);
            break;
          }
          case 26: {
            if (commitment_ == null) {
              Commitment = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Commitment);
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
          case 42: {
            if (salt_ == null) {
              Salt = new global::AElf.Types.Hash();
            }
            input.ReadMessage(Salt);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class QueryCompleted : pb::IMessage<QueryCompleted>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<QueryCompleted> _parser = new pb::MessageParser<QueryCompleted>(() => new QueryCompleted());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryCompleted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Oracle.OracleContractReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCompleted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCompleted(QueryCompleted other) : this() {
      queryId_ = other.queryId_ != null ? other.queryId_.Clone() : null;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCompleted Clone() {
      return new QueryCompleted(this);
    }

    /// <summary>Field number for the "query_id" field.</summary>
    public const int QueryIdFieldNumber = 1;
    private global::AElf.Types.Hash queryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash QueryId {
      get { return queryId_; }
      set {
        queryId_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private pb::ByteString result_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Result {
      get { return result_; }
      set {
        result_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryCompleted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryCompleted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(QueryId, other.QueryId)) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (queryId_ != null) hash ^= QueryId.GetHashCode();
      if (Result.Length != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (Result.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (queryId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryId);
      }
      if (Result.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (queryId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryId);
      }
      if (Result.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryCompleted other) {
      if (other == null) {
        return;
      }
      if (other.queryId_ != null) {
        if (queryId_ == null) {
          QueryId = new global::AElf.Types.Hash();
        }
        QueryId.MergeFrom(other.QueryId);
      }
      if (other.Result.Length != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 18: {
            Result = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (queryId_ == null) {
              QueryId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(QueryId);
            break;
          }
          case 18: {
            Result = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
